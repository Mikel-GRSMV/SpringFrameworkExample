Рассмотрим специальные методы, которые могут быть у бинов в spring'е:
1.init-method
2.destroy-method
3.factory method
========================================================================================================================
Bean Lifecycle:
|запуск Spring app|-->|Запускается Spring контейнер|-->|Создается объект бина|-->
-->|В бин внедряются зависимости(DI)|-->|Вызывается указанный init-method|-->|Бин готов к использованию|-->|ПОЛЬЗУЕМСЯ|-->
-->|Вызывается указанный destroy-method|-->|Остановка Spring приложения|
========================================================================================================================
init-method
- метод который запускаетя в ходе инициализации бина
- инициализация ресурсов, обращение к внешним файлам, запуск БД

destroy-method
- метод, который запускается в ходе уничтожения бина(при завершении приложения)
- очищениие ресурсов, закрытие потоков ввода-вывода, закрытие доступа к БД

КАК ЭТО ВЫГЛЯДИТ В КОДЕ:
<bean id="musicBean"
      class="ru.gerasimov.springexample.PopMusic"
      init-method="doMyInit"
      destroy-method="doMyDestroy">
</bean>
Методы doMyInit() и doMyDestroy() создаются в классе бина (PopMusic)
========================================================================================================================
Тонкости init и destroy методов:
- модификатор доступа
у этих методов может быть любой модификатор доступа(public, protected, private)

- тип возвращаемого значения
Может быть любой, но чаще всего используется void(тк нет возможности получить возвращаемое значение).

- название метода
Название может быть любым

- аргументы метода
Эти методы НЕ ДОЛЖНЫ принимат на вход какеи-либо аргументы

ЕЩЕ ОДНА ОНКОСТЬ:
Для бинов со scope "prototype" Spring не вызывает destroy метод.

Spring не берет на себя полный жизненный цикл бинов со scope "prototype".Spring отдает prototype бины клиенту и больше
о них не заботится (в отличие от singleton бинов).
========================================================================================================================
factory-method
Фабричный метод - это паттерн программирования.

Вкратце: паттерн "фабричный метод" предлагает создавать объекты не напрямую, используя оператор new, а через вызов
особого фабричного метода. Объекты все равно будут создаваться при помощи new, но делать это будет фабричный метод
(иногда это бывает полезно).
https://refactoring.guru/ru/design-patterns/factory-method

Если объекты класса создаются фабричным методом, то можно определить factory-method
<bean id="musicBean"
      class="ru.gerasimov.springexample"
      factory-method="getPopMusic">
</bean>

 <bean id="musicBean" //теперь когда Spring будет создавать бин нашего PopMusic
          class="ru.gerasimov.springexample.PopMusic"
          init-method="doMyInit"
          destroy-method="doMyDestroy"
          factory-method="getPopMusic">//он будет вызывать этот метод

    </bean>
========================================================================================================================

